//sender
#include<iostream>
#include<string>
#include<fstream>
using namespace std;

char Encrypt(char ch, int key)
{
	if (ch == ' ')
		return ch;

	if(ch >= 'a' && ch <= 'z'){
		ch = ch + key;
		if (ch > 'z') {
			ch = ch - 'z' + 'a' - 1;
		}
		return ch;
	}
	
}

int main()
{
	int key1, key2, key3;
	string path;
	cout << "Enter value of Key 1 :";
	cin >> key1;
	cout << "Enter value of Key 2 :";
	cin >> key2;
	 cout << "Enter value of Key 3 :";
	cin >> key3;
	cout << "Enter the Path of File :";
	cin >> path;

	ifstream f1;
	f1.open(path);
	string input_data;
	while (getline(f1, input_data))
	{
	}
	string Encryption;
	for (int i = 0; i<input_data.size(); i++)
	{
		if (i<(input_data.size() / 3))
		{
			Encryption += Encrypt(input_data[i], key1);
		}
		else if (i<(2 * input_data.size() / 3))
		{
			Encryption += Encrypt(input_data[i], key2);
		}
		else
		{
			Encryption += Encrypt(input_data[i], key3);
		}

	}
	cout << endl << "File Encrypted Successfully...";
	
	return 0;
}



//Receivers

#include<iostream>
#include<string>
#include<fstream>
using namespace std;

char Decrypt(char ch, int key)
{
	

	if (ch >= 'a' && ch <= 'z') {
		ch = ch - key;
		if (ch < 'a'){
			ch = ch + 'z' - 'a' + 1;
		}
		return ch;
	}
	return ch;
	
}
int main()
{
	int key1, key2, key3;
	string path;
	cout << "Enter value of Key 1 :";
	cin >> key1;
	cout << "Enter value of Key 2 :";
	cin >> key2;
	 cout << "Enter value of Key 3 :";
	cin >> key3;
	cout << "Enter the Path of File :";
	cin >> path;

	ifstream f1;
	f1.open(path);
	string input_data;
	while (getline(f1, input_data))
	{
	}
	string Decryption;
	for (int i = 0; i<input_data.size(); i++)
	{
		if (i<(input_data.size() / 3))
		{
			Decryption += Decrypt(input_data[i], key1);
		}
		else if (i<(2 * input_data.size() / 3))
		{
			Decryption += Decrypt(input_data[i], key2);
		}
		else
		{
			Decryption += Decrypt(input_data[i], key3);
		}

	}

	cout << endl << "File Decrypted Successfully...";
	return 0;
}
